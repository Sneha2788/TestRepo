#Assignment Question 1
import yfinance as yf

tesla=yf.Ticker("TSLA")
tesla_data=tesla.history(period='max')
tesla_data.reset_index(inplace=True)
tesla_data.head()

#Assignment Question 2
import requests
from bs4 import BeautifulSoup 
import pandas as pd
import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)


url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm'
html_data=requests.get(url).text
soup=BeautifulSoup(html_data,'html5lib')
#creating empty dataframe
tesla_revenue = pd.DataFrame(columns=['Date','Revenue'])

#isolating table
table=soup.find_all("tbody")[1]

#collecting all the rows
rows = table.find_all('tr')

#iterating through rows to collect columns

for row in rows:
    tds = row.find_all('td')
    dt=tds[0].text
    rv=tds[1].text
    tesla_revenue=tesla_revenue._append({'Date':dt,'Revenue':rv},ignore_index=True)
    
#remove the comma and dollar sign from the Revenue column
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")

#remove an null or empty strings in the Revenue column

tesla_revenue.dropna(inplace=True)

tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
print(tesla_revenue.tail())

#Assignment Question 3

import yfinance as yf

game_stop=yf.Ticker("GME")
gme_data=game_stop.history(period='max')
gme_data.reset_index(inplace=True)
gme_data.head()

#Assignment Question 4

import requests
import pandas as pd
from bs4 import BeautifulSoup
url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html'
html_data = requests.get(url).text
soup=BeautifulSoup(html_data,'html.parser')
gme_revenue=pd.DataFrame(columns=["Date","Revenue"])
#table=soup.find_all('table',class_='historical_data_table table')
table=soup.find_all("tbody")[1]
#print(table)
rows = table.find_all('tr')
for row in rows:
    column=row.find_all('td')
    dt=column[0].text
    rv=column[1].text
    gme_revenue=gme_revenue._append({'Date':dt,'Revenue':rv},ignore_index=True)
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"")
print(gme_revenue.tail())

Assignment Question 5

import yfinance as yf
import requests
from bs4 import BeautifulSoup 
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)
tesla=yf.Ticker("TSLA")
tesla_data=tesla.history(period='max')
tesla_data.reset_index(inplace=True)
url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm'
html_data=requests.get(url).text
soup=BeautifulSoup(html_data,'html.parser')
#creating empty dataframe
tesla_revenue = pd.DataFrame(columns=['Date','Revenue'])
#isolating table
table=soup.find_all("tbody")[1]
#collecting all the rows
rows = table.find_all('tr')
#iterating through rows to collect columns
for row in rows:
    tds = row.find_all('td')
    dt=tds[0].text
    rv=tds[1].text
    tesla_revenue=tesla_revenue.append({'Date':dt,'Revenue':rv},ignore_index=True)
    #remove the comma and dollar sign from the Revenue column
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")
#remove an null or empty strings in the Revenue column
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()

make_graph(tesla_data, tesla_revenue, 'Tesla')

Assignment Question 6

import yfinance as yf
import requests
from bs4 import BeautifulSoup 
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)
game_stop=yf.Ticker("GME")
gme_data=game_stop.history(period='max')
gme_data.reset_index(inplace=True)
url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html'
html_data = requests.get(url).text
soup=BeautifulSoup(html_data,'html.parser')
gme_revenue=pd.DataFrame(columns=["Date","Revenue"])

table=soup.find_all("tbody")[1]

rows = table.find_all('tr')
for row in rows:
    column=row.find_all('td')
    dt=column[0].text
    rv=column[1].text
    gme_revenue=gme_revenue.append({'Date':dt,'Revenue':rv},ignore_index=True)
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"")


def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("GameStop Historical Share Price", " GameStop Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()

make_graph(gme_data, gme_revenue, 'GameStop')

